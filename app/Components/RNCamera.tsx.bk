// import React, { ReactNode, forwardRef, useCallback, useEffect, useMemo, useRef, useState } from "react"
// import { Text, View, ViewStyle } from "react-native";
// import { Camera, CameraDevice, CameraPosition, CameraRuntimeError, PhotoFile, VideoFile, useCameraDevice } from "react-native-vision-camera";
// import { usePreferredCameraDevice } from "./hooks/usePreferredCameraDevice";
// import { useIsForeground } from "./hooks/useIsForeground";

// interface IRNCamera<T> {
//     cameraFacing?: CameraPosition
//     style?: ViewStyle
//     uri?: string
//     setRef?: Function;
//     recordingButton?: ReactNode;
//     recordingStopButton?: ReactNode;
// }
// // Define the props interface with forwardRef
// interface IRNCameraWithRef extends IRNCamera<Camera> {
//     // Forwarded ref
//     forwardedRef?: any;
// }
// export const RNCamera = forwardRef((props: IRNCameraWithRef, ref) => {
//     // Destructure props
//     const { forwardedRef, ...rest } = props;

//     const camera = useRef<Camera>(null)
//     const [isCameraInitialized, setIsCameraInitialized] = useState(false)
//     const hasMicrophonePermission = useMemo(() => Camera.getMicrophonePermissionStatus() === 'granted', [])

//     // check if camera page is active
//     const isForeground = useIsForeground()
//     const isActive = isForeground

//     const [cameraPosition, setCameraPosition] = useState<'front' | 'back'>('front')
//     const [preferredDevice] = usePreferredCameraDevice()
//     const [isRecording, setIsRecording] = useState(false)

//     let device = useCameraDevice(cameraPosition)
//     if (preferredDevice != null && preferredDevice.position === cameraPosition) {
//         // override default device with the one selected by the user in settings
//         device = preferredDevice
//     } else {
//         const availableDevices = Camera.getAvailableCameraDevices()
//         device = availableDevices.find((d)=> d.position === 'back');
//     }


//     const onError = useCallback((error: CameraRuntimeError) => {
//         console.error(error)
//         return true;
//     }, [])
//     const onInitialized = useCallback(() => {
//         console.log('Camera initialized!')
//         setIsCameraInitialized(true)
//     }, [])

//     //   const onMediaCaptured = useCallback(
//     //     (media: PhotoFile | VideoFile, type: 'photo' | 'video') => {
//     //       console.log(`Media captured! ${JSON.stringify(media)}`)

//     //     },
//     //     [navigation],
//     //   )

//     const [state, setState] = useState({
//         permissionGranted: false
//     })

//     useEffect(() => {
//         const setupCamera = async () => {
//             try {
//                 const hasCameraPermission = await Camera.getCameraPermissionStatus();
//                 if (hasCameraPermission === 'granted') {
//                     setState({ ...state, permissionGranted: true });
//                 } else {
//                     const requestPermissionResult = await Camera.requestCameraPermission();
//                     if (requestPermissionResult === 'granted') {
//                         setState({ ...state, permissionGranted: true });
//                     } else {
//                         console.error('Camera permission denied');
//                         setState({ ...state, permissionGranted: false });
//                     }
//                 }
//             } catch (error) {
//                 console.error('Failed to setup camera:', error);
//                 setState({ ...state, permissionGranted: false });
//             }
//         };
//         setupCamera();

//         return () => {
//             // Clean up any resources if necessary
//         };
//     }, []);

//     const RenderCamera = () => {
//         return <View style={{flex:1}}>
//             {
//                 (state.permissionGranted && device) ? <Camera
//                     ref={forwardedRef || ref}
//                     style={{...props.style && props.style, flex:1}}
//                     device={device}
//                     isActive={true}
//                     video={true}
//                     photo={true}
//                     onInitialized={onInitialized}
//                     onError={onError}
//                 /> : <RenderAwaiting />
//             }
//         </View>
//     }
//     const RenderAwaiting = () => {
//         return <View>
//             <Text>Error Loading Camera...</Text>
//         </View>
//     }

//     return (
//         <>
//             <RenderCamera />
//         </>
//     )
// });